t computes and store the average weighted score for a student.

DROP PROCEDURE IF EXISTS ComputeAverageWeightedScoreForUser;
DELIMITER $$
CREATE PROCEDURE ComputeAverageWeightedScoreForUser (user_id INT)
BEGIN
    DECLARE weighted_score INT DEFAULT 0;
    DECLARE total_weight INT DEFAULT 0;

    SELECT SUM(corrections.score * projects.weight)
        INTO weighted_score
        FROM corrections
            INNER JOIN projects
                ON corrections.project_id = projects.id
        WHERE corrections.user_id = user_id;

    SELECT SUM(projects.weight)
        INTO total_weight
        FROM corrections
            INNER JOIN projects
                ON corrections.project_id = projects.id
        WHERE corrections.user_id = user_id;

    IF total_weight = 0 THEN
        UPDATE users
            SET users.average_score = 0
            WHERE users.id = user_id;
    ELSE
        UPDATE users
            SET users.average_score = weighted_score / total_weight
            WHERE users.id = user_id;
    ENt have a score under 80 (strict) and no last_meeting or more than 1 month.

DROP VIEW IF EXISTS need_meeting;
CREATE VIEW need_meeting AS 
    SELECT name FROM students 
        WHERE score < 80 
        AND (
            land the first letter of name and the score

CREATE INDEX idx_name_first_score 
ON names(
    name(1),
    score
);
st_meeting IS NULL 
            OR last_meeting < ADDDATE(CURDATE(), interval -1 MONTH)
        );D IF;
END $$
DELIMITER ;
